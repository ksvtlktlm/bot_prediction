import asyncio
import logging
import random
import os
from collections import defaultdict
from datetime import datetime, date

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_history = defaultdict(list) # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
user_magic_check = defaultdict(lambda: (date.min, 0)) # –ú–∞–≥–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è
user_luck_check = defaultdict(lambda: (date.min, 0))  # –ò–Ω–¥–µ–∫—Å —É–¥–∞—á–∏
user_ritual_check = defaultdict(lambda: (date.min, "")) # –î–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã

HISTORY_LIMIT = 3

ADMIN_ID = os.getenv("ADMIN_ID")

async def log_to_admin(bot, user_id, username, action):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    log_text = f"üìù –õ–æ–≥: {username} (ID: {user_id}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {action}"
    await bot.send_message(ADMIN_ID, log_text)

def load_predictions(filename="predictions.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(filename, "r", encoding="utf-8") as file:
            predictions = [line.strip() for line in file.readlines()]
        return predictions
    except FileNotFoundError:
        return ["–§–∞–π–ª —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!"]

def load_oracle_questions(filename="oracle_questions.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –û—Ä–∞–∫—É–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        return ["–§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!"]

def load_daily_rituals(filename="daily_rituals.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        return ["–§–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!"]

def load_oracle_responses(filename="oracle_responses.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–æ–±—â—ë–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –û—Ä–∞–∫—É–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        return ["–û—Ç–≤–µ—Ç –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∂–µ."]

def load_magic_ball_responses(filename="magic_ball_responses.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –®–∞—Ä–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        return ["–®–∞—Ä –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"]


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
oracle_questions = load_oracle_questions()
predictions = load_predictions()
daily_rituals = load_daily_rituals()
oracle_responses = load_oracle_responses()
magic_ball_responses = load_magic_ball_responses()


# –ú–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class OracleState(StatesGroup):
    waiting_for_answer = State()

class MagicBallState(StatesGroup):
    waiting_for_question = State()


@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    await log_to_admin(bot, user_id, username, "/start")
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")],
            [KeyboardButton(text="‚ú® –£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏")],
            [KeyboardButton(text="üé≤ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É")],
            [KeyboardButton(text="üßô‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –æ—Ç –û—Ä–∞–∫—É–ª–∞")],
            [KeyboardButton(text="üìú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∏—Ç—É–∞–ª")],
            [KeyboardButton(text="üé± –®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")],
            [KeyboardButton(text="üîÑ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    welcome_text = f"üîÆ –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–Ø ‚Äì –±–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∂–¥–µ—Ç —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è? –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ! üëá"
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=keyboard)

@dp.message(Command("prediction"))
async def send_prediction(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    prediction = random.choice(predictions)  # –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    username = message.from_user.username or "No username"
    await log_to_admin(bot, user_id, username, "/prediction")
    user_history[user_id].append(prediction)
    if len(user_history[user_id]) > HISTORY_LIMIT:
        user_history[user_id].pop(0)
    await message.answer("üîÆ –Ø —Å–º–æ—Ç—Ä—é –≤ –±—É–¥—É—â–µ–µ... –î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥—É... ü§î")
    await asyncio.sleep(2)
    await message.answer(f"üîÆ –í–æ—Ç, —á—Ç–æ –∑–≤–µ–∑–¥—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è, {user_name}:\n\n{prediction}")

@dp.message(Command("magic"))
async def magic_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    now = datetime.now().date()
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    await log_to_admin(bot, user_id, username, "/magic")
    if user_id in user_magic_check:
        last_check_date, magic_value = user_magic_check[user_id]
        if last_check_date == now:
            await message.answer(f"üîí –¢—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª(–∞) —Å–≤–æ—é –º–∞–≥–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é —Å–µ–≥–æ–¥–Ω—è!\n\n‚ú® –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –º–∞–≥–∏–∏: {magic_value}%\nüîÑ –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!")
            return
    magic_level = random.randint(10, 100)
    user_magic_check[user_id] = (now, magic_level)
    await message.answer(f"‚ú® –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏ ‚Äì {magic_level}%!")

@dp.message(Command("luck"))
async def luck_index(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    now = datetime.now().date()
    username = message.from_user.username or "No username"
    await log_to_admin(bot, user_id, username, "/luck")
    if user_id in user_luck_check:
        last_check_date, luck_value = user_luck_check[user_id]
        if last_check_date == now:
            await message.answer(f"üåü –¢—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª(–∞) —Å–≤–æ—é —É–¥–∞—á—É —Å–µ–≥–æ–¥–Ω—è!\n\nüé≤ –¢–≤–æ–π –∏–Ω–¥–µ–∫—Å —É–¥–∞—á–∏: {luck_value}%\nüîÑ –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!")
            return
    luck_value = random.randint(1, 100)
    user_luck_check[user_id] = (now, luck_value)
    if luck_value >= 80:
        comment = "üî• –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å! –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —É–¥–∞—á—É!"
    elif luck_value >= 50:
        comment = "üôÇ –í–ø–æ–ª–Ω–µ –Ω–µ–ø–ª–æ—Ö–æ! –ú–æ–∂–Ω–æ —Ä–∏—Å–∫–Ω—É—Ç—å!"
    else:
        comment = "üåß –û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ! –°–µ–≥–æ–¥–Ω—è –Ω–µ –ª—É—á—à–∏–π –¥–µ–Ω—å –¥–ª—è –∞–≤–∞–Ω—Ç—é—Ä."
    await message.answer(f"üåü –ò–Ω–¥–µ–∫—Å —É–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {luck_value}%\n\n{comment}")

@dp.message(Command("oracle"))
async def oracle_question(message: Message, state: FSMContext):
    """–û—Ä–∞–∫—É–ª –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å, –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    await log_to_admin(bot, user_id, username, "/oracle")
    intro_text = (
        "üßô‚Äç‚ôÇÔ∏è *–û—Ä–∞–∫—É–ª –º—É–¥—Ä –∏ –∑–∞–≥–∞–¥–æ—á–µ–Ω...*\n\n"
        "–û—Ä–∞–∫—É–ª –∑–∞–¥–∞—Å—Ç —Ç–µ–±–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç, "
        "–∞ –æ–Ω –¥–∞—Å—Ç —Ç–µ–±–µ –∑–∞–≥–∞–¥–æ—á–Ω–æ–µ, –Ω–æ –º—É–¥—Ä–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ. –ò–Ω–æ–≥–¥–∞ –∏—Å—Ç–∏–Ω–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–∞–º, "
        "–≥–¥–µ –º—ã –µ—ë –Ω–µ –∏—â–µ–º... üîÆ\n\n"
        "–ì–æ—Ç–æ–≤(–∞)? –¢–æ–≥–¥–∞ —Å–ª—É—à–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ... üëÇ"
    )
    await message.answer(intro_text, parse_mode="Markdown")
    await asyncio.sleep(2)
    question = random.choice(oracle_questions)
    await state.update_data(question=question) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await message.answer(f"üîÆ –û—Ä–∞–∫—É–ª –∑–∞–¥–∞—ë—Ç —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å:\n\n{question}\n\nüí≠ –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç!")
    await state.set_state(OracleState.waiting_for_answer)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

@dp.message(OracleState.waiting_for_answer)
async def oracle_response(message: Message, state: FSMContext):
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    question = user_data.get("question", "–í–æ–ø—Ä–æ—Å –ø–æ—Ç–µ—Ä—è–ª—Å—è...")
    response = random.choice(oracle_responses)
    await message.answer(f"üìú –û—Ä–∞–∫—É–ª –≥–æ–≤–æ—Ä–∏—Ç: {response}")
    await state.clear()

@dp.message(Command("ritual"))
async def daily_ritual(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    await log_to_admin(bot, user_id, username, "/ritual")
    now = datetime.now().date()
    if user_id in user_ritual_check:
        last_check_date, ritual = user_ritual_check[user_id]
        if last_check_date == now:
            await message.answer(f"üìú –¢–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{ritual}\n\nüîÑ –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º!")
            return
    ritual = random.choice(daily_rituals)
    user_ritual_check[user_id] = (now, ritual)
    await message.answer(f"üìú –¢–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è:\n\n{ritual}")

@dp.message(Command("magicball"))
async def start_magic_ball(message: Message, state: FSMContext):
    """–®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π; –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    await log_to_admin(bot, user_id, username, "/magicball")
    await message.answer("üé± –®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∂–¥—ë—Ç –≤–æ–ø—Ä–æ—Å! –ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –¥–∞–º –æ—Ç–≤–µ—Ç!", parse_mode="Markdown")
    await state.set_state(MagicBallState.waiting_for_question)

@dp.message(MagicBallState.waiting_for_question)
async def magic_ball_response(message: Message, state: FSMContext):
    response = random.choice(magic_ball_responses)
    await message.answer(f"üîÆ –û—Ç–≤–µ—Ç –®–∞—Ä–∞: {response}")
    await state.clear()

@dp.message(Command("history"))
async def show_history(message: Message):
    """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ –≤–∏–¥–µ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    await log_to_admin(bot, user_id, username, "/history")
    if user_id not in user_history or not user_history[user_id]:
        await message.answer("üìú –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏ /prediction, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ!")
        return
    history_text = "\n\n".join(user_history[user_id])
    await message.answer(f"üìú –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:\n\n{history_text}")

@dp.message(Command("help"))
async def send_help(message: Message):
    """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    await log_to_admin(bot, user_id, username, "/help")
    help_text = """
‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π?*

üîÆ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/prediction ‚Äì –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.
/magic ‚Äì –£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏.
/luck ‚Äì –£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–¥–∞—á–∏.
/oracle ‚Äì –û—Ä–∞–∫—É–ª –∑–∞–¥–∞—Å—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∞ –∑–∞—Ç–µ–º –¥–∞—Å—Ç —Ç–µ–±–µ –º—É–¥—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ.\n
/ritual - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
/magicball - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —à–∞—Ä—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
/history ‚Äì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
/help - –ü–æ–º–æ—â—å.
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é!\n
üí° *–°–æ–≤–µ—Ç:* –î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —á–∞—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –µ–≥–æ!
"""
    await message.answer(help_text, parse_mode="Markdown")

@dp.message()
async def handle_buttons(message: Message, state: FSMContext):
    if message.text == "üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
        await send_prediction(message)
    elif message.text == "üîÑ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π":
        await show_history(message)
    elif message.text == "‚ú® –£–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏":
        await magic_command(message)
    elif message.text == "üé≤ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É":
        await luck_index(message)
    elif message.text == "üßô‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –æ—Ç –û—Ä–∞–∫—É–ª–∞":
        await oracle_question(message, state)
    elif message.text == "üìú –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∏—Ç—É–∞–ª":
        await daily_ritual(message)
    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await send_help(message)
    elif message.text == "üé± –®–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π":
        await start_magic_ball(message, state)
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É! üòä")


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())